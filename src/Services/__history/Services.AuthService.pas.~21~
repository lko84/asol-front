unit Services.AuthService;

interface

uses
  System.JSON, REST.Client, REST.Types, REST.Response.Adapter, Winapi.Windows,
  System.Classes, System.SysUtils, Services.Interfaces, Spring.Container, Dto, Lifetime;

type
  ILoginObserver = interface
    ['{E812A7E6-FA59-41F5-8DAE-2C246D474C63}'] // GUID required
    procedure OnLoginSuccess(Success: Boolean);
  end;
type
  TAuthService = class(TInterfacedObject, IAuthService)
  private
    UserSession: TUserSession;
    FClient: TRESTClient;
    FRequest: TRESTRequest;
    FResponse: TRESTResponse;
  public
    constructor Create;
    function TryLogin(const Username, Password: string): Boolean;
    function GetSession: TUserSession;
    procedure AddAuthHeader(Request: TRESTRequest);
  end;


  implementation

constructor TAuthService.Create;
begin
  FClient := TRESTClient.Create('http://localhost:8080');
  FRequest := TRESTRequest.Create(nil);
  FResponse := TRESTResponse.Create(nil);
  FRequest.Client := FClient;
  FRequest.Response := FResponse;
end;

function TAuthService.TryLogin(const Username, Password: string): Boolean;
var
  JsonObj: TJSONObject;
begin
  FRequest.ResetToDefaults;

  FRequest.Resource := 'auth/login';
  FRequest.Method := rmPOST;
  FRequest.Client := FClient;
  FRequest.Response := FResponse;

  JsonObj := TJSONObject.Create;
  try
    JsonObj.AddPair('username', Username);
    JsonObj.AddPair('password', Password);
    FRequest.Body.ClearBody;
    FRequest.AddBody(JsonObj.ToJSON, ctAPPLICATION_JSON);
  finally
    JsonObj.Free;
  end;

  FRequest.Execute;

  if FResponse.StatusCode = 200 then
  begin
    var UserSession := TUserSession.Create;
    var JSON := TJSONObject.ParseJSONValue(FResponse.Content);

    UserSession.Token := JSON.GetValue<string>('token');
    UserSession.UserId := JSON.GetValue<string>('userid');
    UserSession.Username := JSON.GetValue<string>('username');

    var RolesArray := JSON.GetValue<TJSONArray>('roles');
    SetLength(UserSession.Roles, RolesArray.Count);
    for var I := 0 to RolesArray.Count - 1 do
    begin
      var RoleStr := RolesArray.Items[I].Value;
      try
        UserSession.Roles[I] := StringToUserRole(RoleStr);
      except
        on E: EConvertError do
          raise Exception.CreateFmt('Unknown role: %s', [RoleStr]);
      end;
    end;

    Result := True;
  end
  else
    Result := False;
end;

function TAuthService.GetSession: TUserSession;
begin
  Result := UserSession;
end;

procedure TAuthService.AddAuthHeader(Request: TRESTRequest);
begin
  If Assigned(UserSession) then
  Request.AddParameter('Authorization', 'Bearer ' + UserSession.Token, pkHTTPHEADER);
end;

end.
